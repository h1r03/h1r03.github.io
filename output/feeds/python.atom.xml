<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom"><title>Data Science Blog - python</title><link href="http://h1r03.github.io/" rel="alternate"></link><link href="http://h1r03.github.io/feeds/python.atom.xml" rel="self"></link><id>http://h1r03.github.io/</id><updated>2018-04-21T12:00:00-07:00</updated><entry><title>Python Style Guide Cheatsheet</title><link href="http://h1r03.github.io/python-style-guide-cheatsheet.html" rel="alternate"></link><published>2018-04-21T12:00:00-07:00</published><updated>2018-04-21T12:00:00-07:00</updated><author><name>h1r03</name></author><id>tag:h1r03.github.io,2018-04-21:/python-style-guide-cheatsheet.html</id><summary type="html">&lt;p&gt;Python Style Guide Cheatsheet&lt;/p&gt;</summary><content type="html">&lt;blockquote&gt;
&lt;p&gt;Readability counts&lt;/p&gt;
&lt;p&gt;code is read much more often than it is written&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h2&gt;Code Layout&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;Space&lt;/strong&gt; is preferred, rather than tab&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Maximum Line Length: &lt;strong&gt;79 characters&lt;/strong&gt; &lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Binary operator: &lt;strong&gt;before a line break&lt;/strong&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;import: &lt;strong&gt;seperate lines&lt;/strong&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;order of imports: &lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;standard library imports&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;third party imports&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;local application/library specifc imports&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Comments: complete sentences starting with &lt;strong&gt;Capital letter&lt;/strong&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;â€‹&lt;/p&gt;
&lt;h2&gt;Namining Convention&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;_ prefix: weak internal use. &lt;/li&gt;
&lt;li&gt;_ suffix: used to avoid conflicts with Python keyword&lt;/li&gt;
&lt;li&gt;__ prefix: strong internal use (harder to access because of name mangling)&lt;/li&gt;
&lt;li&gt;&lt;strong&gt; prefix &amp;amp; &lt;/strong&gt; suffix: magic objects or attributes. &lt;strong&gt;Never use these names&lt;/strong&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Never use: &lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;l (lowercase letter el) &amp;lt;-&amp;gt; 1&lt;/li&gt;
&lt;li&gt;O (uppercase letter oh) &amp;lt;-&amp;gt; 0&lt;/li&gt;
&lt;/ul&gt;
&lt;h4&gt;Use Lowercase &amp;amp; seperated by '_':&lt;/h4&gt;
&lt;ul&gt;
&lt;li&gt;Package and Module Names&lt;/li&gt;
&lt;li&gt;Function and Variable Names&lt;/li&gt;
&lt;li&gt;Method and Instance Variables Names&lt;/li&gt;
&lt;/ul&gt;
&lt;h4&gt;Use CapWords convention:&lt;/h4&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;Class Names&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Type Variable Names &lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;Exception Names &lt;/li&gt;
&lt;/ul&gt;
&lt;h4&gt;Use ALL CAPITAL:&lt;/h4&gt;
&lt;ul&gt;
&lt;li&gt;Constants&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;Programming Recommendations&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;Try/Except clauses: &lt;/li&gt;
&lt;li&gt;limit the &lt;code&gt;try&lt;/code&gt; clause to the absolute minimum amount of code necessary&lt;/li&gt;
&lt;li&gt;Return statement:&lt;/li&gt;
&lt;li&gt;be consistent what to return i.e., all returns the same expression or none&lt;/li&gt;
&lt;li&gt;Use &lt;code&gt;''.startswith()&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;rather than checking for prefixes or suffixes&lt;/li&gt;
&lt;li&gt;Use &lt;code&gt;isinstance(obj, int)&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;rather than comparing types by &lt;code&gt;type(obj)&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;Use the fact that &lt;strong&gt;empty sequences (strings, lists, tuples ) are &lt;/strong&gt;&lt;code&gt;false&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;if not seq:&lt;/code&gt; or &lt;code&gt;if seq:&lt;/code&gt; &lt;/li&gt;
&lt;li&gt;rather than &lt;code&gt;if len(seq):&lt;/code&gt; or &lt;code&gt;if not len(seq)&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Note that the following sections are ommited since IDE can automatically correct.&lt;/p&gt;
&lt;p&gt;Whitespace in Expressions and Statement&lt;/p&gt;</content><category term="python pep8 cheatsheet"></category></entry><entry><title>PDB - Python Debugger</title><link href="http://h1r03.github.io/pdb-python-debugger.html" rel="alternate"></link><published>2018-04-07T12:00:00-07:00</published><updated>2018-04-07T12:00:00-07:00</updated><author><name>h1r03</name></author><id>tag:h1r03.github.io,2018-04-07:/pdb-python-debugger.html</id><summary type="html">&lt;p&gt;Tutorial for PDB&lt;/p&gt;</summary><content type="html">&lt;h1&gt;PDB Introduction&lt;/h1&gt;
&lt;h2&gt;Basic commands for &lt;code&gt;PDB&lt;/code&gt;&lt;/h2&gt;
&lt;ol&gt;
&lt;li&gt;&lt;code&gt;l&lt;/code&gt;: list &lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;display the lines around the current position&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;&lt;code&gt;s&lt;/code&gt; : step&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;execute the current line and stop at the next possible point&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;&lt;code&gt;n&lt;/code&gt;: next&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;continue to execute until the next line in the current function is reached&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;
&lt;p&gt;&lt;code&gt;b&lt;/code&gt;: break
   set a breakpoint&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;code&gt;r&lt;/code&gt;: return
   continue to execute until the current function returns&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;h2&gt;Refernce&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="https://github.com/spiside/pdb-tutorial"&gt;pdb-tutorial for python&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://davidhamann.de/2017/04/22/debugging-jupyter-notebooks/"&gt;pdb tutorial for jupyter notebook&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;</content><category term="python"></category></entry></feed>